generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * =================== UTILISATEURS ===================
 */
model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String?
  displayName  String?
  createdAt    DateTime @default(now())

  memberships   CollectionMember[]
  articleStates ArticleUser[] // relation avec ArticleUser
}

/**
 * =================== COLLECTIONS ===================
 */
enum Role {
  OWNER
  READER
}

model Collection {
  id          String   @id @default(cuid())
  name        String
  description String?
  isShared    Boolean  @default(false) @map("is_shared")
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")

  members CollectionMember[]
  feeds   Feed[]
}

model CollectionMember {
  collectionId String @map("collection_id")
  userId       String @map("user_id")

  collection Collection @relation(fields: [collectionId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  role Role

  @@id([collectionId, userId])
}

/**
 * =================== FEEDS & ARTICLES ===================
 */
enum FeedStatus {
  active
  inactive
}

model Feed {
  id           String     @id @default(cuid())
  collectionId String     @map("collection_id")
  collection   Collection @relation(fields: [collectionId], references: [id])

  url           String
  title         String
  description   String?
  updateFreqMin Int        @default(60) @map("update_freq_min")
  status        FeedStatus @default(active)
  lastFetchedAt DateTime?  @map("last_fetched_at")

  articles Article[]

  @@unique([collectionId, url])
  @@index([collectionId])
}

model Article {
  id     String @id @default(cuid())
  feedId String @map("feed_id")
  feed   Feed   @relation(fields: [feedId], references: [id])

  guid        String
  title       String
  link        String
  author      String?
  publishedAt DateTime? @map("published_at")
  summary     String?
  contentHtml String?   @map("content_html")
  createdAt   DateTime  @default(now()) @map("created_at")

  tags String[] @default([]) @db.Text // tags (Postgres text[])

  states ArticleUser[] // relation avec ArticleUser

  @@unique([feedId, guid])
  @@index([feedId])
}

model ArticleUser {
  articleId String @map("article_id")
  userId    String @map("user_id")

  article Article @relation(fields: [articleId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  read     Boolean @default(false)
  favorite Boolean @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@id([articleId, userId])
    @@unique([articleId, userId], name: "articleId_userId") // âœ… ajout
  @@index([userId])
}
